from os import walk
from os.path import sep

import pandas as pd

class Armory:
    def __init__(self,game):
        assert game in (str(n) for n in range(4,10))
        self.game=game
        self.dir=sep.join(['.','weapon_data','fe%s'%game])

    def listWeaponTypes(self):
        weapons=list()
        for x,y,filelist in walk(self.dir):
            for file in filelist:
                file=file[:-4]
                weapons.append(file)
        return weapons

    def getWeaponData(self,weapon_type):
        wtypes=self.listWeaponTypes()
        if weapon_type not in wtypes:
            message=(
                '%s does not seem to be a valid weapon type.'%weapon_type,\
                'Please choose from the list below.',\
                ''
                )
            for wtype in wtypes:
                print(wtype)
            raise Exception
        file=weapon_type.lower()+'.csv'
        file=sep.join([self.dir,file])
        data=pd.read_csv(file,index_col=0)
        return data

    def getWeaponNames(self,weapon_type):
        data=self.getWeaponData(weapon_type)
        weapon_names=list(data.index)
        return weapon_names

    def getWeaponStats(self,weapon):
        weapon_type=None
        for wtype in self.listWeaponTypes():
            wnames=self.getWeaponNames(wtype)
            if weapon not in wnames:
                continue
            else:
                weapon_type=wtype
                break
        if weapon_type is None:
            message=(
                'Please check the list generated by the getWeaponNames method.',\
                '%s does not seem to be in any of the databases.'%weapon
                )
            message='\n'.join(message)
            print(message)
            raise Exception
        else:
            data=self.getWeaponData(weapon_type)
            labels=data.columns
            if 'Effects' in labels or 'Note' in labels:
                redundant_labels='Effects','Note'
                new_index=['Notes' if index in redundant_labels else index for index in labels]
                data.columns=new_index
            if 'Use' in labels:
                new_index=['Uses' if index == 'Use' else index for index in labels]
                data.columns=new_index
            return data.loc[weapon,:]

    def compare(self,weapons):
        assert type(weapons) != str
        weapon_list=list()
        for wpn in weapons:
            data=self.getWeaponStats(wpn)
            weapon_list.append(data)
        data=pd.DataFrame(weapon_list)
        return data.transpose()

    def comparePlus(self,other,weapon):
        assert type(weapon) == str
        weapon_list=list()
        for x in (self,other):
            data=x.getWeaponStats(weapon)
            weapon_list.append(data)
        data=pd.DataFrame(weapon_list)
        columns=list()
        for num in [self.game,other.game]:
            columns.append(num+'!'+weapon)
        data.index=columns
        return data.transpose()

if __name__ == '__main__':
    weapon='Fire'
    game='6'
    x=Armory(game)
    y=x.listWeaponTypes()
    for t in y:
        print(t)
